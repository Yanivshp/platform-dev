<?php
/**
 * @file
 * Provides functionality for the Nexteuropa geofield map layer bundle.
 */

/**
 * Alters map layer content.
 *
 * See MapLayerController->buildContent();
 */
function nexteuropa_geofield_layer_layer_content_alter(&$content, $wrapper, $entity) {

  // Fetches map data from Nexteuropa geofield layer.
  if ($entity->type == 'nexteuropa_geofield_layer') {
    $settings = drupal_json_decode($wrapper->settings->value());
    if (map_layer_fieldcheck('map_geospatial', $wrapper)) {
      $features = nexteuropa_geofield_layer_features($wrapper->map_geospatial->value());
      $layers[] = array(
        'layer_settings' => $settings,
        'label' => $wrapper->title->value(),
        'features' => $features,
        'id' => map_layer_id($wrapper->title->value()),
      );
    }
    $content['#attached']['js'][] = array(
      'data' => array(
        'nexteuropa_geofield_layers' => $layers,
      ),
      'type' => 'setting',
    );

    $content['#attached']['js'][] = array(
      'data' => array(
        'nexteuropa_geofield_layers' => $layers,
      ),
      'type' => 'setting',
    );
  }
  return $content;
}

/**
 * Alters the inline entity form of the map layer.
 *
 * See MapLayerInlineEntityFormController->EntityForm().
 */
function nexteuropa_geofield_layer_layer_inline_entity_form_alter(&$entity_form, $settings, $type) {
  if ($type == 'nexteuropa_geofield_layer') {
    $entity_form['popup'] = nexteuropa_map_layer_form_elements('popup', $settings);
    $entity_form['clustering'] = nexteuropa_map_layer_form_elements('clustering', $settings);
    $entity_form['icon'] = nexteuropa_map_layer_form_elements('icon', $settings);
    $entity_form['attribution'] = nexteuropa_map_layer_form_elements('attribution', $settings);
  }
  return $entity_form;
}

/**
 * Alters the map layer settings.
 *
 * See MapLayerInlineEntityFormController->entityFormSubmit() and
 * nexteuropa_map_layer_form_submit().
 */
function nexteuropa_geofield_layer_map_layer_settings_alter(&$settings, $map_layer, $form_state) {
  if ($map_layer->type == 'nexteuropa_geofield_layer') {
    $settings['attribution'] = $map_layer->attribution;
    $settings['popup'] = $map_layer->popup;
    $settings['icon'] = $map_layer->icon;
    $settings['clustering'] = $map_layer->clustering;
  }
  return $settings;
}

/**
 * Alters map content.
 *
 * See MapController->buildContent().
 */
function nexteuropa_geofield_layer_map_content_alter(&$custom_js) {
  $nexteuropa_geofield_layer_js = base_path() . drupal_get_path('module', 'nexteuropa_geofield_layer') . "/js/nexteuropa_geofield_layer.js?v=" . rand(0, 33333);
  $custom_js[] = $nexteuropa_geofield_layer_js;
  return $custom_js;
}

/**
 * Creates a geoJson feature from CSV data.
 */
function nexteuropa_geofield_layer_features($data) {
  $lines = explode("\n", $data);
  $csv_data = array();
  foreach ($lines as $line) {
    if (isset($line[0])) {
      $csv_data[] = str_getcsv($line);
    }
  }
  foreach ($csv_data as $item) {
    $lat = $item[0];
    $lon = $item[1];
    $name = check_plain($item[2]);
    $description = check_plain($item[3]);
    $url = $item[4];
    $features[] = array(
      'type' => 'Feature',
      'properties' => array(
        'name' => $name,
        'popupContent' => theme('popup', array(
          'title' => $name,
          'description' => $description,
          'url' => $url,
        )),
      ),
      'geometry' => array(
        'type' => 'Point',
        'coordinates' => array(
          round($lon, 4),
          round($lat, 4),
        ),
      ),
    );
  }
  return $features;
}

dd('asfasfsafa');

function nexteuropa_geofield_layer_js_alter(&$javascript) {
  dd($javascript);

// $javascript['profiles/multisite_drupal_standard/libraries/leaflet/leaflet-src.js']['#weight'] = 666;
// $javascript['profiles/multisite_drupal_standard/libraries/leaflet/leaflet-src.js']['#group'] = 666;


}
