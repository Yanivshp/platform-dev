<?php

/**
 * @file
 * Provides functionality for the Map layer module.
 */

module_load_include('inc', 'map_layer', 'map_layer.theme');

/**
 * Implements hook_entity_info().
 */
function map_layer_entity_info() {
  $return = array(
    'map_layer' => array(
      'label' => t('Map layer'),
      'entity class' => 'MapLayer',
      'controller class' => 'MapLayerController',
      'base table' => 'map_layer',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'mlid',
        'bundle' => 'type',
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(),
      'load hook' => 'map_layer_load',
      'view modes' => array(
        'map_layer' => array(
          'label' => t('Map layer'),
          'custom settings' => TRUE,
        ),
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'module' => 'map_layer',
      'access callback' => 'map_layer_access',
      'inline entity form' => array(
        'controller' => 'MapLayerInlineEntityFormController'
      ),
    ),
  );
  $return['map_layer_type'] = array(
    'label' => t('Map layer type'),
    'entity class' => 'MapLayerType',
    'controller class' => 'MapLayerTypeController',
    'base table' => 'map_layer_type',
    'fieldable' => FALSE,
    'bundle of' => 'map_layer',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'module' => 'map_layer',
    // Enables the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/structure/map-layer-types',
      'file' => 'map_layer.admin.inc',
      'controller class' => 'MapLayerTypeUIController',
    ),
    'access callback' => 'map_layer_type_access',
  );

  return $return;
}

/**
 * Implements hook_entity_info_alter().
 */
function map_layer_entity_info_alter(&$entity_info) {
  foreach (map_layer_types() as $type => $info) {
    $entity_info['map_layer']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/map-layer-types/manage/%map_layer_type',
        'real path' => 'admin/structure/map-layer-types/manage/' . $type,
        'bundle argument' => 4,
      ),
    );
  }
}

/**
 * Implements hook_menu().
 */
function map_layer_menu() {
  $items = array();

  // Sets menu item to add map layer.
  $items['admin/structure/map-layer/add'] = array(
    'title' => 'Add map layer',
    'page callback' => 'map_layer_admin_add_page',
    'access arguments' => array('administer map_layer entities'),
    'file' => 'map_layer.admin.inc',
    'type' => MENU_LOCAL_ACTION,
    'tab_parent' => 'admin/structure/map-layer',
    'tab_root' => 'admin/structure/map-layer',
  );
  $map_layer_uri = 'map-layer/%map_layer';
  $map_layer_uri_argument_position = 1;

  // Sets base menu item for map layer.
  $items[$map_layer_uri] = array(
    'title callback' => 'entity_label',
    'title arguments' => array('map_layer', $map_layer_uri_argument_position),
    'page callback' => 'map_layer_view',
    'page arguments' => array($map_layer_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array(
      'view',
      'map_layer',
      $map_layer_uri_argument_position
    ),
    'file' => 'map_layer.pages.inc',
  );

  // Sets menu item to view map layer.
  $items[$map_layer_uri . '/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  // Sets menu item to delete map layer.
  $items[$map_layer_uri . '/delete'] = array(
    'title' => 'Delete map layer',
    'title callback' => 'map_layer_label',
    'title arguments' => array($map_layer_uri_argument_position),
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'map_layer_delete_form',
      $map_layer_uri_argument_position
    ),
    'access callback' => 'entity_access',
    'access arguments' => array(
      'edit',
      'map_layer',
      $map_layer_uri_argument_position
    ),
    'file' => 'map_layer.admin.inc',
  );

  // Sets menu item to edit map layer.
  $items[$map_layer_uri . '/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'map_layer_form',
      $map_layer_uri_argument_position
    ),
    'access callback' => 'entity_access',
    'access arguments' => array(
      'edit',
      'map_layer',
      $map_layer_uri_argument_position
    ),
    'file' => 'map_layer.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  // Sets menu item to add map layer *type*.
  foreach (map_layer_types() as $type => $info) {
    $items['admin/structure/map-layer/add/' . $type] = array(
      'title' => 'Add map layer',
      'page callback' => 'map_layer_add',
      'page arguments' => array(2),
      'access callback' => 'entity_access',
      'access arguments' => array('create', 'map_layer', $type),
      'file' => 'map_layer.admin.inc',
    );
  }

  // Sets menu item to delete map layer type.
  $items['admin/structure/map-layer-types/%map_layer_type/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('map_layer_type_form_delete_confirm', 4),
    'access arguments' => array('administer map_layer types'),
    'weight' => 1,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'map_layer.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function map_layer_permission() {
  $permissions = array(
    'administer map_layer types' => array(
      'title' => t('Administer map layer types'),
      'description' => t('Allows users to configure map layer types and their fields.'),
      'restrict access' => TRUE,
    ),
    'create map_layer entities' => array(
      'title' => t('Create map layers'),
      'description' => t('Allows users to create map layers.'),
      'restrict access' => TRUE,
    ),
    'view map_layer entities' => array(
      'title' => t('View map layers'),
      'description' => t('Allows users to view map layers.'),
      'restrict access' => TRUE,
    ),
    'edit any map_layer entities' => array(
      'title' => t('Edit any map layers'),
      'description' => t('Allows users to edit any map layers.'),
      'restrict access' => TRUE,
    ),
    'edit own map_layer entities' => array(
      'title' => t('Edit own map layers'),
      'description' => t('Allows users to edit own map layers.'),
      'restrict access' => TRUE,
    ),
  );

  return $permissions;
}


/**
 * Implements hook_entity_property_info_alter().
 */
function map_layer_entity_property_info_alter(&$info) {
  $properties = &$info['map_layer']['properties'];
  $properties['created'] = array(
    'label' => t("Date created"),
    'type' => 'date',
    'description' => t("The date the map layer was posted."),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer nodes',
    'schema field' => 'created',
  );
  $properties['changed'] = array(
    'label' => t("Date changed"),
    'type' => 'date',
    'schema field' => 'changed',
    'description' => t("The date the node was most recently updated."),
  );
  $properties['uid'] = array(
    'label' => t("Author"),
    'type' => 'user',
    'description' => t("The author of the map layer."),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer map_layer entities',
    'required' => TRUE,
    'schema field' => 'uid',
  );
  $properties['settings'] = array(
    'label' => t("Settings"),
    'type' => 'text',
    'description' => t("The settings of the map layer."),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer map_layer entities',
    'required' => TRUE,
    'schema field' => 'settings',
  );

}


/*******************************************************************************
 ********************************* Map layer API's **********************************
 ******************************************************************************/

/**
 * Access callback for map layer.
 */
function map_layer_access($op, $map_layer, $account = NULL, $entity_type = NULL) {
  global $user;

  if (!isset($account)) {
    $account = $user;
  }
  switch ($op) {
    case 'create':
      return user_access('administer map_layer entities', $account)
      || user_access('create map_layer entities', $account);
    case 'view':
      return user_access('administer map_layer entities', $account)
      || user_access('view map_layer entities', $account);
    case 'edit':
    case 'update':
    case 'delete':
      return user_access('administer map_layer entities')
      || user_access('edit any map_layer entities')
      || (user_access('edit own map_layer entities') && ($map_layer->uid == $account->uid));
  }
}

/**
 * Load a map layer.
 */
function map_layer_load($mlid, $reset = FALSE) {
  $map_layers = map_layer_load_multiple(array($mlid), array(), $reset);
  return reset($map_layers);
}

/**
 * Load multiple map layers based on certain conditions.
 */
function map_layer_load_multiple($mlids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('map_layer', $mlids, $conditions, $reset);
}

/**
 * Save map layer.
 *
 * Collects values for storing as JSON in settings.
 */
function map_layer_save($map_layer) {

  $settings = array(
    'popup' => array(
      'show' => $map_layer->show,
      'popin' => $map_layer->popin,
    ),
    'clustering' => array(
      'cluster_markers' => $map_layer->cluster_markers,
    ),
    'icon' => array(
      'icon' => $map_layer->icon,
    ),
    'enabled' => array(
      'enabled' => $map_layer->enabled,
    ),
    'show_settings' => $map_layer->show_settings,
  );
  $map_layer->settings = json_encode($settings);
  $map_layer->changed = REQUEST_TIME;
  entity_save('map_layer', $map_layer);
}

/**
 * Delete single map layer.
 */
function map_layer_delete($map_layer) {
  entity_delete('map_layer', entity_id('map_layer', $map_layer));
}

/**
 * Delete multiple map layers.
 */
function map_layer_delete_multiple($map_layer_ids) {
  entity_delete_multiple('map_layer', $map_layer_ids);
}


/*******************************************************************************
 ****************************** Map layer type API's ********************************
 ******************************************************************************/

/**
 * Access callback for map layer type.
 */
function map_layer_type_access($op, $entity = NULL) {
  return user_access('administer map_layer types');
}

/**
 * Load map layer type.
 */
function map_layer_type_load($map_layer_type) {
  return map_layer_types($map_layer_type);
}

/**
 * List of map layer types.
 */
function map_layer_types($type_name = NULL) {
  $types = entity_load_multiple_by_name('map_layer_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}

/**
 * Save map layer type entity.
 */
function map_layer_type_save($map_layer_type) {
  entity_save('map_layer_type', $map_layer_type);
}

/**
 * Delete single case type.
 */
function map_layer_type_delete($map_layer_type) {
  entity_delete('map_layer_type', entity_id('map_layer_type', $map_layer_type));
}

/**
 * Delete multiple case types.
 */
function map_layer_type_delete_multiple($map_layer_type_ids) {
  entity_delete_multiple('map_layer_type', $map_layer_type_ids);
}

/**
 * Implements hook_views_api().
 */
function map_layer_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'map_layer'),
  );
}




/**
 * Helper function to standardize forms between field formatters and others.
 *
 * Returns a fully loaded form element.
 *
 * @move to generic module.
 */
function map_layer_form_elements($group, $settings) {
  $form_element = NULL;
  switch ($group) {
    case 'popup':
      $form_element = array(
        '#title' => t('Pop-up'),
        '#type' => 'fieldset',
        '#weight' => 15,
      );
      $form_element['show'] = array(
        '#title' => t('Show a popup when markers are clicked.'),
        '#type' => 'checkbox',
        '#default_value' => $settings[$group]['show'],
      );
      $form_element['popin'] = array(
        '#title' => t('Use pop-in (show details in right side bar).'),
        '#type' => 'checkbox',
        '#default_value' => $settings[$group]['popin'],
      );
      break;

    case 'enabled':
      $form_element = array(
        '#type' => 'container',
        '#weight' => 11,
      );
      $form_element['enabled'] = array(
        '#title' => t('Enable the layer by default in the map'),
        '#type' => 'checkbox',
        '#default_value' => $settings[$group]['enabled'],
      );
      break;

    case 'icon':
      $form_element = array(
        '#type' => 'container',
        '#weight' => 13,
      );
      $form_element['icon'] = array(
        '#type' => 'select',
        '#title' => t('Icon'),
        '#options' => map_layer_icons(),
        '#default_value' => $settings[$group]['icon'],
      );
      break;
    case 'clustering':
      $form_element = array(
        '#type' => 'container',
        '#weight' => 17,
      );
      $form_element['cluster_markers'] = array(
        '#type' => 'checkbox',
        '#title' => t('Cluster markers'),
        '#default_value' => $settings[$group]['cluster_markers'],
      );
      break;

    case 'tile_layer':
      $form_element = array(
        '#type' => 'fieldset',
        '#title' => t('Map background'),
        '#weight' => 19,
      );
      $form_element['tile_layer'] = array(
        '#type' => 'select',
        '#title' => t('Tile layer'),
        '#default_value' => $settings[$group]['tile_layer'],
        '#options' => ne_map_tiles(),
      );
      break;

    case 'attribution':
      $form_element = array(
        '#type' => 'fieldset',
        '#title' => t('Attribution'),
        '#weight' => 16,
      );
      $form_element['attributionControl'] = array(
        '#type' => 'checkbox',
        '#title' => t('Show attribution'),
        '#default_value' => $settings[$group]['attributionControl'],
      );
      $form_element['attribution'] = array(
        '#type' => 'textfield',
        '#title' => t('Attribution text'),
        '#default_value' => $settings[$group]['attribution'],
        '#size' => 80,
      );
      break;
  }
  return $form_element;
}

/**
 * Provides icon colors.
 *
 * Populates the icon field in the map node type.
 *
 * @todo move to generic map module.
 */
function map_layer_icons() {
  return array(
    'black' => 'Black',
    'blue' => 'Blue',
    'green' => 'Green',
    'orange' => 'Orange',
    'pink' => 'Pink',
    'red' => 'Red',
    'turquoise' => 'Turquoise',
    'yellow' => 'Yellow',
  );
}

/**
 * Inspects wrapped entities & fields.
 *
 * @todo move to generic map module.
 */
function map_layer_wrapper_inspect($w) {
  $values = array();
  foreach ($w->getPropertyInfo() as $key => $val) {
    $values[$key] = $w->$key->value();
  }
  return $values;
}

/**
 * Checks if wrapped entity fields have a value.
 *
 * @todo move to generic map module.
 */
function map_layer_fieldcheck($field, $wrapper) {
  if ($wrapper->__isset($field)) {
    $fieldvalue = $wrapper->$field->value();
    if (!empty($fieldvalue)) {
      return TRUE;
    }
  }
  else {
    return FALSE;
  }
}



/**
 * Generates an ID from a string.
 *
 * @todo make more sophisticated.
 */
function map_layer_id($string) {
  return strtolower(preg_replace('/[^a-zA-Z0-9-]+/', '-', $string));
}

/**
 * Implements hook_inline_entity_form_table_fields_alter().
 */
function map_layer_inline_entity_form_table_fields_alter(&$fields, $context) {
  if ($context['parent_entity_type'] == 'ne_map' && $context['entity_type'] == 'map_layer') {
    $fields['title'] = array(
      'type' => 'property',
      'label' => t('Label'),
      'weight' => 1,
    );
  }
}

/**
 * Implements hook_inline_entity_form_entity_form_alter.
 */
function map_layer_inline_entity_form_entity_form_alter(&$entity_form, &$form_state) {
  if ($entity_form['#entity_type'] == 'map_layer') {
    $entity_form['actions']['ief_edit_save']['#value'] = t('Update map layer');
  }
}

/**
 * Class providing JavaScript settings for a map layer.
 */
class MapLayerSettings {
  /**
   * Defines list of default settings.
   */
  public function __construct() {
    $this->settings = array(
      'clustering' => array(
        'cluster_markers' => TRUE,
      ),
      'icon' => array(
        'icon' => 'blue',
      ),
      'popup' => array(
        'show' => TRUE,
        'popin' => TRUE,
      ),
      'enabled' => array(
        'enabled' => TRUE,
      ),
      'show_settings' => FALSE,
      'attribution' => array(
        'attributionControl' => FALSE,
        'attribution' => NULL,
      ),
      'style' => array(
        'fill_color' => '#C8E9F2',
        'fill_opacity' => 0.9,
        'border_weight' => 1,
        'border_color' => "#0065B1",
        'border_opacity' => 1,
        'dash_array' => 2,
      ),
    );
  }

  /**
   * Changes the default settings.
   */
  public function customize($settings) {
    foreach ($settings as $key => $setting) {
      $this->settings[$key] = $setting;
    }
  }

  /**
   * Removes a setting.
   */
  public function remove($settings) {
    foreach ($settings as $key => $setting) {
      unset($this->settings[$key]);
    }
  }
}

/**
 * Creates the URL map layer bundle.
 */
function map_layer_create_url_layer() {
  $bundle = new stdClass();
  $bundle->type = 'url_layer';
  $bundle->label = t('URL layer');
  $bundle->is_new = TRUE;
  $bundle->description = t("Map layer from URLs");
  $controller = new MapLayerTypeController('map_layer_type');
  $controller->save($bundle);
}

/**
 * Defines and creates the Map URL base and instance field.
 */
function map_layer_create_map_url_field() {
  if (field_info_field('map_url')) {
    watchdog('map_layer', 'Field Map URL not created because it exists already', array(), WATCHDOG_NOTICE, NULL);
  }
  else {
    $array_fields = array(

      // Defines the topics term field.
      'map_url' => array(

        'active' => 1,
        'cardinality' => -1,
        'deleted' => 0,
        'entity_types' => array(),
        'indexes' => array(),
        'locked' => 1,
        'module' => 'link',
        'settings' => array(
          'attributes' => array(
            'class' => '',
            'rel' => '',
            'target' => 'default',
          ),
          'display' => array(
            'url_cutoff' => 80,
          ),
          'enable_tokens' => 1,
          'title' => 'optional',
          'title_maxlength' => 128,
          'title_value' => '',
          'url' => 0,
        ),
        'translatable' => 0,
        'type' => 'link_field',
        'field_name' => 'map_url',
      ),
    );

    // Creates the defined field(s).
    foreach ($array_fields as $field) {
      field_create_field($field);
    }
  }

  // Defines the Map URL field for the content type den.
  $t = get_t();
  $array_instances = array(
    'map_url' => array(
      'entity_type' => 'map_layer',
      'bundle' => 'url_layer',
      'default_value' => NULL,
      'deleted' => 0,
      'display' => array(
        'default' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => 0,
        ),
        'map_layer' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => 0,
        ),
      ),
      'field_name' => 'map_url',
      'label' => $t('URL'),
      'description' => 'URL where to find map data. You can link to json or kml files. The URLs must be publicly accessible.',
      'required' => 0,
      'settings' => array(
        'absolute_url' => 1,
        'attributes' => array(
          'class' => '',
          'configurable_class' => 0,
          'configurable_title' => 0,
          'rel' => '',
          'target' => 'default',
          'title' => '',
        ),
        'display' => array(
          'url_cutoff' => 80,
        ),
        'enable_tokens' => 1,
        'rel_remove' => 'default',
        'title' => 'none',
        'title_label_use_field_label' => 0,
        'title_maxlength' => 128,
        'title_value' => '',
        'url' => 0,
        'user_register_form' => FALSE,
        'validate_url' => 1,
      ),
      'widget' => array(
        'active' => 0,
        'module' => 'link',
        'settings' => array(),
        'type' => 'link_field',
        'weight' => 4,
      ),
    ),
  );

  // Creates the field instance on the entity.
  foreach ($array_instances as $instance) {
    field_create_instance($instance);
  }

}


/**
 * Implements hook_map_layer_inline_entity_form().
 *
 * Adds the map layer custom JavaScript.
 */
//function map_layer_ne_map_build_content_alter(&$custom_js) {
//  $map_layer_js = base_path() . drupal_get_path('module', 'map_layer') . "/js/map_layer.js?v=" . rand(0, 33333);
//  $custom_js[] = $map_layer_js;
//  return $custom_js;
//}
