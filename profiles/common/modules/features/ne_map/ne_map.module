<?php
/**
 * @file
 * Provides functionality for the map entity.
 */

define('NE_MAP_WEBTOOLS_ENVIRONMENT', '//europa.eu/webtools/load.js');

/**
 * Implements hook_entity_info().
 */
function ne_map_entity_info() {
  $return = array(
    'ne_map' => array(
      'label' => t('Map'),
      'entity class' => 'Map',
      'controller class' => 'MapController',
      'base table' => 'ne_map',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'mid',
      ),
      'admin ui' => array(
        'path' => 'admin/structure/maps',
        'controller class' => 'MapUIController',
        'menu wildcard' => '%map',
        'file' => 'ne_map.admin.inc',
      ),
      'bundles' => array(
        'ne_map' => array(
          'label' => t('Map'),
          'admin' => array(
            'path' => 'admin/structure/maps',
            'access arguments' => array('administer maps'),
          ),
        ),
      ),
      'load hook' => 'ne_map_load',
      'view modes' => array(
        'full' => array(
          'label' => t('Default'),
          'custom settings' => FALSE,
        ),
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'module' => 'ne_map',
      'access callback' => 'ne_map_access',
    ),
  );
  return $return;
}

/**
 * Implements hook_menu().
 */
function ne_map_menu() {
  $items = array();

  $items['map/add'] = array(
    'title' => 'Add map',
    'page callback' => 'ne_map_add',
    'access callback' => 'entity_access',
    'access arguments' => array('create', 'ne_map', 'ne_map'),
    'file' => 'ne_map.admin.inc',
    'type' => MENU_LOCAL_ACTION,
    'tab_parent' => 'map',
    'tab_root' => 'map',
  );

  $map_uri = 'map/%ne_map';
  $map_uri_argument_position = 1;

  $items[$map_uri] = array(
    'title callback' => 'entity_label',
    'title arguments' => array('ne_map', $map_uri_argument_position),
    'page callback' => 'ne_map_view',
    'page arguments' => array($map_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('view', 'ne_map', $map_uri_argument_position),
    'file' => 'ne_map.pages.inc',
  );

  $items[$map_uri . '/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items[$map_uri . '/delete'] = array(
    'title' => 'Delete map',
    'title callback' => 'ne_map_label',
    'title arguments' => array($map_uri_argument_position),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ne_map_delete_form', $map_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('edit', 'ne_map', $map_uri_argument_position),
    'file' => 'ne_map.admin.inc',
  );

  $items[$map_uri . '/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ne_map_form', $map_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('edit', 'ne_map', $map_uri_argument_position),
    'file' => 'ne_map.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function ne_map_permission() {
  $permissions = array(
    'create ne_map entities' => array(
      'title' => t('Create maps'),
      'description' => t('Allows users to create maps.'),
      'restrict access' => TRUE,
    ),
    'view ne_map entities' => array(
      'title' => t('View maps'),
      'description' => t('Allows users to view maps.'),
      'restrict access' => TRUE,
    ),
    'edit any ne_map entities' => array(
      'title' => t('Edit any maps'),
      'description' => t('Allows users to edit any maps.'),
      'restrict access' => TRUE,
    ),
    'edit own ne_map entities' => array(
      'title' => t('Edit own maps'),
      'description' => t('Allows users to edit own maps.'),
      'restrict access' => TRUE,
    ),
  );

  return $permissions;
}

/**
 * Implements hook_entity_property_info_alter().
 */
function ne_map_entity_property_info_alter(&$info) {
  $properties = &$info['ne_map']['properties'];
  $properties['created'] = array(
    'label' => t("Date created"),
    'type' => 'date',
    'description' => t("The date the map was posted."),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer nodes',
    'schema field' => 'created',
  );
  $properties['changed'] = array(
    'label' => t("Date changed"),
    'type' => 'date',
    'schema field' => 'changed',
    'description' => t("The date the map was most recently updated."),
  );
  $properties['uid'] = array(
    'label' => t("Author"),
    'type' => 'user',
    'description' => t("The author of the map."),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer ne_map entities',
    'required' => TRUE,
    'schema field' => 'uid',
  );
}


/*******************************************************************************
 ********************************* Map API's **********************************
 ******************************************************************************/

/**
 * Access callback for map.
 */
function ne_map_access($op, $map, $account = NULL, $entity_type = NULL) {
  global $user;

  if (!isset($account)) {
    $account = $user;
  }
  switch ($op) {
    case 'create':
      return user_access('administer ne_map entities', $account)
      || user_access('create ne_map entities', $account);

    case 'view':
      return user_access('administer ne_map entities', $account)
      || user_access('view ne_map entities', $account);

    case 'edit':
      return user_access('administer ne_map entities')
      || user_access('edit any ne_map entities')
      || (user_access('edit own ne_map entities') && ($map->uid == $account->uid));
  }
}

/**
 * Load a map.
 */
function ne_map_load($mid, $reset = FALSE) {
  $maps = ne_map_load_multiple(array($mid), array(), $reset);
  return reset($maps);
}

/**
 * Load multiple maps based on certain conditions.
 */
function ne_map_load_multiple($mids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('ne_map', $mids, $conditions, $reset);
}

/**
 * Delete single map.
 */
function ne_map_delete($map) {
  entity_delete('ne_map', entity_id('ne_map', $map));
}

/**
 * Delete multiple maps.
 */
function ne_map_delete_multiple($map_ids) {
  entity_delete_multiple('ne_map', $map_ids);
}


/**
 * Helper function to standardize forms between field formatters and others.
 *
 * Returns a fully loaded form element.
 */
function ne_map_form_elements($group, $settings, $options = NULL) {
  $form_element = NULL;
  switch ($group) {
    case 'zoom':
      // Define zoom options.
      $zoom_options = array(
        0 => t('0 - Low/Far'),
        18 => t('18 - High/Close'),
      );
      for ($i = 1; $i < 18; $i++) {
        $zoom_options[$i] = $i;
      }
      ksort($zoom_options);

      $form_element = array(
        '#type' => 'fieldset',
        '#title' => t('Zooming'),
        '#weight' => 12,
      );

      // @todo validate zoom.

      $form_element['initialZoom'] = array(
        '#title' => t('Initial zoom level'),
        '#description' => t('The starting zoom level when this map is rendered.  Restricted by min and max zoom settings.'),
        '#type' => 'select',
        '#options' => $zoom_options,
        '#default_value' => isset($settings[$group]['initialZoom']) ? $settings[$group]['initialZoom'] : 2,
        // @todo add zoom validation. See contrib Leaflet module
        // '#element_validate' => array('_mapeditor_validate_zoom'),.
      );
      $form_element['minZoom'] = array(
        '#title' => t('Minimum zoom level'),
        '#description' => t('The minimum zoom level allowed. (How far away can you view from?)'),
        '#type' => 'select',
        '#options' => $zoom_options,
        '#default_value' => isset($settings[$group]['minZoom']) ? $settings[$group]['minZoom'] : 1,
        // @todo add zoom validation. See contrib Leaflet module
        // '#element_validate' => array('_mapeditor_validate_zoom'),.
      );
      $form_element['maxZoom'] = array(
        '#title' => t('Maximum zoom level'),
        '#description' => t('The maximum zoom level allowed. (How close in can you get?).'),
        '#type' => 'select',
        '#options' => $zoom_options,
        '#default_value' => isset($settings[$group]['maxZoom']) ? $settings[$group]['maxZoom'] : 14,
         // @todo add zoom validation. See contrib Leaflet module
         // '#element_validate' => array('_mapeditor_validate_zoom'),.
      );
      break;

    case 'tiles':
      $form_element = array(
        '#type' => 'fieldset',
        '#title' => t('Map background'),
        '#weight' => 16,
      );
      $form_element['tiles'] = array(
        '#type' => 'select',
        '#title' => t('Tiles'),
        '#description' => t('Tiles to use a map background'),
        '#default_value' => isset($settings[$group]['tiles']) ? $settings[$group]['tiles'] : 'osmec',
        '#options' => ne_map_tiles(),
      );
      break;

    case 'height':
      $form_element = array(
        '#type' => 'container',
        '#weight' => 6,
      );
      $form_element['height'] = array(
        '#title' => t('Map height'),
        '#type' => 'textfield',
        '#field_suffix' => t('px'),
        '#size' => 4,
        '#default_value' => isset($settings[$group]['height']) ? $settings[$group]['height'] : '430',
        '#required' => FALSE,
        '#element_validate' => array('ne_map_validate_height'),
      );

      // Displays a warning under the title field for a low height.
      $form_element['height']['#suffix'] = "<div id='min-height-label'
      class='description'></div>";
      $form_element['height']['#attached']['js'][] = array(
        'type' => 'file',
        'data' => drupal_get_path('module', 'mapeditor') . '/js/forms.js',
      );
      $form_element['height']['#attached']['js'][] = array(
        'data' => array(
          'mapeditor' => array(
            'min_height' => 300,
            'label' => t('To ensure the map menu displays correctly, it is
            recommended to choose a height higher than 300px.'),
            'warning' => t('<strong>Attention. The entered height is lower than
            recommended</strong>.'),
          ),
        ),
        'type' => 'setting',
      );
      break;

    case 'center':

      $form_element = array(
        '#type' => 'fieldset',
        '#title' => t('Map center'),
        '#description' => t('Center of the map. E.g. latitude 50.84 and 4.36 longitude for Brussels'),
        '#weight' => 8,
      );
      $form_element['lat'] = array(
        '#title' => t('Latitude'),
        '#type' => 'textfield',
        '#size' => 10,
        '#default_value' => isset($settings[$group]['lat']) ? $settings[$group]['lat'] : 50.84,
        '#required' => FALSE,
      );
      $form_element['lon'] = array(
        '#title' => t('Longitude'),
        '#type' => 'textfield',
        '#size' => 10,
        '#default_value' => isset($settings[$group]['lon']) ? $settings[$group]['lon'] : 4.36,
        '#required' => FALSE,
      );
      $form_element['fitbounds'] = array(
        '#type' => 'checkbox',
        '#title' => t('Fit map to visible markers'),
        '#description' => t('This sets the center of the map automatically based on the visible markers. It ignores the map center coordinates set above.'),
        '#default_value' => isset($settings[$group]['fitbounds']) ? $settings[$group]['fitbounds'] : TRUE,
      );
      break;

    case 'attribution':
      $form_element = array(
        '#type' => 'fieldset',
        '#title' => t('Attribution'),
        '#weight' => 16,
      );
      $form_element['attributionControl'] = array(
        '#type' => 'checkbox',
        '#title' => t('Show attribution'),
        '#default_value' => isset($settings[$group]['attributionControl']) ? $settings[$group]['attributionControl'] : TRUE,
      );
      $form_element['attribution'] = array(
        '#type' => 'textfield',
        '#title' => t('Attribution text'),
        '#default_value' => isset($settings[$group]['attribution']) ? $settings[$group]['attribution'] : t('Map data by Eurostat and the European Commission'),
        '#size' => 80,
      );
      break;

  }
  return $form_element;
}

/**
 * Provides available tiles.
 *
 * Populate the tiles field in the map node type.
 */
function ne_map_tiles() {
  return array(
    'osmec' => 'Open Street Map customised for European Commission',
    'graybg' => 'Gray background with country outlines',
    'coast' => 'Gray background with continent outlines',
    'gray' => 'Gray shaded relief of earth',
    'hypso' => 'Climate shaded relief of earth',
    'natural' => 'Landcover shaded relief of earth',
    'bmarble' => 'Satellite  images of earth',
    'copernicus003' => 'Copernicus Core003 mosaic',
    'countrynames_europe' => 'Country names Europe',
    'citynames_europe' => 'City names Europe',
    'roadswater_europe' => 'Roads and waterways Europe',
    'countryboundaries_world' => 'Country boundaries world',
  );
}

/**
 * Validates the height form element.
 */
function ne_map_validate_height(&$form, &$form_state) {
  if (isset($form_state['values']['height'])) {
    if (!is_numeric($form_state['values']['height']) || $form_state['values']['height'] < 0) {
      form_error($form['height'], t('Map height needs to be a positive number'));
    }
  }
}

/**
 * Validates zoom level.
 *
 * Checks e.g. that initial zoom is higher than maximum zoom.
 */
function _validate_zoom() {
  // @todo. write validate zoom. See leaflet module.
}

/**
 * Save map layer.
 *
 * Collects values for storing as JSON in settings.
 */
function map_save($map) {

  // Fetches field values from form state.
  $settings = array(
    'tiles' => array(
      'tiles' => $map->tiles,
    ),
    'height' => array(
      'height' => $map->height,
    ),
    'center' => array(
      'lat' => $map->lat,
      'lon' => $map->lon,
      'fitbounds' => $map->fitbounds,
    ),
    'zoom' => array(
      'initialZoom' => $map->initialZoom,
      'minZoom' => $map->minZoom,
      'maxZoom' => $map->maxZoom,
    ),
    'attribution' => array(
      'attributionControl' => $map->attributionControl,
      'attribution' => $map->attribution,
    ),
    'show_settings' => $map->show_settings,
  );
  $map->settings = json_encode($settings);
  $map->changed = REQUEST_TIME;
  entity_save('ne_map', $map);
}


/**
 * Save map.
 */
function ne_map_save($map) {
  // @todo. re-enamble map save?
  // entity_save('ne_map', $map);.
}


/**
 * Class providing JavaScript settings for a map.
 */
class NEMapSettings {

  /**
   * Provides the settings array and default values.
   */
  public function __construct() {
    $this->settings = array(
      'center' => array(
        'lat' => 55.106,
        'lon' => 28.154,
        'fitbounds' => TRUE,
      ),
      'tiles' => array(
        'tiles' => 'osmec',
      ),
      'dragging' => TRUE,
      'touchZoom' => TRUE,
      'scrollWheelZoom' => TRUE,
      'attribution' => array(
        'attributionControl' => TRUE,
        'attribution' => t('Map data by Eurostat and the European Commission'),
      ),
      'zoom' => array(
        'initialZoom' => 4,
        'minZoom' => 2,
        'maxZoom' => 10,
      ),
      'height' => array(
        'height' => 430,
      ),
      'icon' => array(
        'icon' => 'blue',
      ),
      'padding' => variable_get('mapeditor_fitbounds_padding', 30),
      'show_settings' => FALSE,
    );
  }

  /**
   * Changes the default settings.
   */
  public function customize($settings) {
    foreach ($settings as $key => $setting) {
      $this->settings[$key] = $setting;
    }
  }

  /**
   * Removes a setting.
   */
  public function remove($settings) {
    foreach ($settings as $key => $setting) {
      unset($this->settings[$key]);
    }
  }

}

/**
 * Implements hook_views_api().
 */
function ne_map_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'ne_map'),
  );
}

/**
 * Implements hook_admin_paths().
 */
function ne_map_admin_paths() {
  if (variable_get('node_admin_theme')) {
    $paths = array(
      'map/*/edit' => TRUE,
      'map/add' => TRUE,
      'map/*/delete' => TRUE,
    );
    return $paths;
  }
}

/**
 * Implements hook_feature_set_api().
 */
function ne_map_feature_set_api() {
  return array('version' => '1.0');
}
