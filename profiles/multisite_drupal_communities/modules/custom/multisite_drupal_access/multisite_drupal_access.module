<?php
/**
 * @file
 * Multisite drupal access.
 */

/**
 * Implements hook_node_access_records().
 */
function multisite_drupal_access_node_access_records($node) {
  $grants = array();

  // Give the right for any users to view community type.
  if ($node->type == 'community') {
    $group_type = 'node';
    $grants[] = array(
      'realm' => 'all',
      'gid' => 0,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    );
  }

  // Allow users to see their own unpublished contents in OG group.
  if (empty($node->status) && $groups = og_get_entity_groups('node', $node)) {
    foreach ($groups['node'] as $gid) {
      $grants[] = array(
        'realm' => "multisite_drupal_access_og_view_own_unpublished_" . $node->uid,
        'gid' => $gid,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 10,
      );
    }
  }

  return $grants;
}

/**
 * Implements hook_node_grants().
 */
function multisite_drupal_access_node_grants($account, $op) {
  if ($op != 'view') {
    return;
  }
  $grants = array();
  // Get all OG Group.
  // (Not only user's group in order to check perm for non-member OG role.).
  $groups = multisite_drupal_access_og_get_all_group();
  if (!empty($groups)) {
    foreach ($groups as $group_id) {
      if (($account->uid || ($account->uid == 0 && user_access("view own unpublished content"))) && (og_user_access('node', $group_id, 'view own unpublished content') || og_user_access('node', $group_id, 'View all unpublished content'))) {
        $grants['multisite_drupal_access_og_view_own_unpublished_' . $account->uid][] = $group_id;
      }
    }
  }
  return $grants;
}

/**
 * Implements hook_og_permission().
 */
function multisite_drupal_access_og_permission() {
  // Add OG permission to view unpublished nodes.
  return array(
    'view own unpublished content' => array(
      'title' => t('View own unpublished content'),
      'description' => t("Allow user to see unpublished content within the group."),
      'default role' => array(OG_ADMINISTRATOR_ROLE),
    ),
  );
}

/**
 * Return all existing groups of an entity type (bypass node access).
 */
function multisite_drupal_access_og_get_all_group($group_type = 'node') {
  if (!field_info_field(OG_GROUP_FIELD)) {
    return array();
  }

  $query = new EntityFieldQuery();
  $return = $query
    ->entityCondition('entity_type', $group_type)
    ->fieldCondition(OG_GROUP_FIELD, 'value', 1, '=')
    ->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT')
    ->execute();

  return !empty($return[$group_type]) ? array_keys($return[$group_type]) : array();
}
